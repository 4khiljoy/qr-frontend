<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    
    <div class="dashboard">
        <h1>Dashboard</h1>
        <div class="user-actions">
            <button class="toggle-dropdown"><i class="fas fa-bars"></i></button>
        
            <div class="user-actions-buttons">
                <form action="/settings" method="get">
                    <button id="settingsBtn"><i class="fas fa-cog"></i> Settings</button>
                </form>
                <form action="/logout" method="post">
                    <button id="logoutBtn"><i class="fas fa-sign-out-alt"></i> Logout</button>
                </form>
            </div>
        </div>
        
        <form action="/api/vouchers" method="post">
            <button type="submit">Generate QR Code</button>
        </form>
        <canvas id="qrCodeCanvas" style="display: none;"></canvas>
        <p id="successMessage"></p>
        <ul id="voucherList"></ul>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script>
        // Function to generate PDF for each voucher
        let pdfDATA = [];
        const createVoucherPDF = (voucher, qrCanvas) => {
            console.log(pdfDATA);
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF();
            const pageWidth = pdf.internal.pageSize.getWidth();
            const centerX = pageWidth / 2;

            pdf.setFont("helvetica", "bold");
            const pdfFont = pdfDATA.length !== 0 ? pdfDATA.fsize : 19;
            console.log(pdfFont);
            pdf.setFontSize(pdfFont);
            const title = pdfDATA.length !== 0 ? pdfDATA.title : "Voucher";
            pdf.text(title, centerX, 20, { align: "center" });

            pdf.setFont("helvetica", "normal");
            const pdfFont1 = pdfDATA.length !== 0 ? pdfDATA.nfsize : 12;
            console.log(pdfFont1);
            pdf.setFontSize(pdfFont1);
            pdf.text(`Voucher Number: ${voucher.number}`, centerX, 40, { align: "center" });
            pdf.text(`Generated Date: ${voucher.generatedAt.split('T')[0]}`, centerX, 50, { align: "center" });
            pdf.text(`Expiry Date: ${voucher.expiredAt.split('T')[0]}`, centerX, 60, { align: "center" });

            const qrImageData = qrCanvas.toDataURL("image/png");
            const qrWidth = pdfDATA.length !== 0 ? pdfDATA.vwidth : 100;
            const qrHeight = pdfDATA.length !== 0 ? pdfDATA.vheight : 100;
            pdf.addImage(qrImageData, "PNG", centerX - 50, 80, qrWidth, qrHeight);

            pdf.setFontSize(10);
            pdf.text("Thank you for using our service!", centerX, pdf.internal.pageSize.height - 20, { align: "center" });

            return pdf;
        };

        const getDataFromApi = async () => {
            try {
                const response = await fetch('/api/vouchers', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                const data = await response.json();

                const pffData = await fetch('/api/pdfsetting', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                const pdfdata = await pffData.json();
                pdfDATA = pdfdata;

                const voucherList = document.getElementById('voucherList');
                voucherList.innerHTML = ''; // Clear existing content

                data.forEach((voucher) => {
                    const li = document.createElement('li');
                    li.textContent = `Voucher Number: ${voucher.number}, Generated Date: ${voucher.generatedAt.split('T')[0]}, Expiry Date: ${voucher.expiredAt.split('T')[0]}`;

                    const qrCanvas = document.createElement('canvas');
                    li.appendChild(qrCanvas);

                    // Create download button
                    const downloadBtn = document.createElement('button');
                    downloadBtn.textContent = "Download as PDF";
                    downloadBtn.classList.add('downloadbtn');
                    li.appendChild(downloadBtn);

                    // Create print button
                    const printBtn = document.createElement('button');
                    printBtn.textContent = "Print PDF";
                    printBtn.classList.add('printbtn');
                    li.appendChild(printBtn);

                    voucherList.appendChild(li);

                    // Generate QR code
                    QRCode.toCanvas(qrCanvas, voucher.number, { width: 200, height: 200 }, (error) => {
                        if (error) {
                            console.error('Error generating QR code:', error);
                        } else {
                            // Display success message
                            const successMessage = document.getElementById('successMessage');
                            successMessage.textContent = `QR Code  generated successfully!`;
                            successMessage.style.color = 'green';

                        }  setTimeout(() => {
            successMessage.textContent = '';  // Clear message
        },1000);  // Time in milliseconds (5000 ms = 5 seconds)
    
                    });

                    // Add download functionality
                    downloadBtn.addEventListener('click', () => {
                        const pdf = createVoucherPDF(voucher, qrCanvas);
                        pdf.save(`${voucher.number}.pdf`);
                    });

                    // Add print functionality
                    printBtn.addEventListener('click', () => {
                        const pdf = createVoucherPDF(voucher, qrCanvas);
                        const pdfBlob = pdf.output('blob');
                        const pdfURL = URL.createObjectURL(pdfBlob);

                        const iframe = document.createElement('iframe');
                        iframe.style.display = 'none'; // Hide the iframe
                        iframe.src = pdfURL;

                        document.body.appendChild(iframe);

                        // Open print dialog
                        iframe.onload = () => {
                            iframe.contentWindow.print();
                        };
                    });
                });
            } catch (error) {
                console.error('Error fetching vouchers:', error);
            }
        };

        document.addEventListener('DOMContentLoaded', getDataFromApi);

        document.addEventListener('DOMContentLoaded', () => {
    const toggleButton = document.querySelector('.toggle-dropdown');
    const userActions = document.querySelector('.user-actions');

    // Toggle the dropdown menu
    toggleButton.addEventListener('click', () => {
        userActions.classList.toggle('show');
    });

    // Close the dropdown when clicking outside
    document.addEventListener('click', (event) => {
        if (!userActions.contains(event.target)) {
            userActions.classList.remove('show');
        }
    });

    // Automatically reset the visibility for larger screens
    const checkScreenSize = () => {
        if (window.innerWidth > 768) {
            userActions.classList.remove('show'); // Reset the dropdown state
        }
    };

    // Attach resize event listener
    window.addEventListener('resize', checkScreenSize);

    // Initialize the screen size check
    checkScreenSize();
});


    </script>
</body>
</html>
